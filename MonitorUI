import customtkinter as ctk
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler


class root(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("Monitor de archivos")
        self.geometry("400x280")

        print(self.grid_size())

        # crear el entry de ruta
        self.entry = ctk.CTkEntry(
            master=self, placeholder_text="Ingrese la ruta a monitorear")
        self.entry.pack(side="top")
        self.entry.configure(
            width=400, height=15)

        # crear el frame
        self.frame = ctk.CTkFrame(
            master=self, width=400, height=200, corner_radius=10)
        self.frame.pack()

        # crear el label donde se muestran los datos
        self.label1 = ctk.CTkLabel(
            master=self.frame, text="", font=("Arial", 15), corner_radius=10, width=400, height=200)
        self.label1.pack()
        self.value = None

        # Crear un botón personalizado y agregarlo a la cuadrícula
        self.button = ctk.CTkButton(
            master=self, text="Ver ruta", command=self.mostrar_texto)
        self.button.pack(anchor="s", side="left", padx=95)
        self.button.configure(
            width=20, height=30)

        self.button = ctk.CTkButton(
            master=self, text="Analizar", command=self.iniciar_dog)
        self.button.pack(anchor="s", side="left",)
        self.button.configure(
            width=20, height=30, fg_color="red")

    def mostrar_texto(self):
        self.value = self.entry.get()
        self.label1.configure(text="Ruta a analizar : " + self.value)

    def iniciar_dog(self):
        dog_instance = dog(self.value, self.label1)
        dog_instance.dogo()


class dog(FileSystemEventHandler):
    def __init__(self, texto, label1) -> None:
        super().__init__()
        self.value = texto
        texto = self.value
        self.label1 = label1

    def on_created(self, event):
        self.label1.configure(text=event.src_path+" - Creado")

    def on_modified(self, event):
        self.label1.configure(text=event.src_path + " - Modificado")

    def on_moved(self, event):
        self.label1.configure(text=event.src_path + " - Movido")

    def on_deleted(self, event):
        self.label1.configure(text=event.src_path + " - Borrado")

    def dogo(self):
        observer = Observer()
        observer.schedule(self, self.value, recursive=True)
        observer.start()


root().mainloop()
